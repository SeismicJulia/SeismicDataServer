{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SAIG: Tools and Data","text":""},{"location":"#resources","title":"Resources","text":"<ul> <li>Data</li> </ul> <ul> <li>Codes</li> </ul>"},{"location":"#links","title":"Links","text":"<ul> <li>SAIG</li> <li>SeismicLab</li> <li>Seismic Julia on GitHub</li> </ul>"},{"location":"admin/","title":"Admin Dashboard","text":""},{"location":"codes/","title":"2D Acoustic Frequency-domain FWI","text":"<p>This is a 2D full waveform inversion code using simultaneous encoded sources based on first- and second-order optimization methods developed in Amsalu's Thesis.</p> <p>Forward modelling: solves a two-dimensional wave-equation in frequency domain $$ \\frac{\\partial }{\\partial x}\\left(\\frac{1 }{\\rho}\\frac{\\partial }{\\partial x} p(\\omega) \\right) +\\frac{\\partial }{\\partial z}\\left(\\frac{1}{\\rho}\\frac{\\partial }{\\partial z} p(\\omega) \\right) + \\frac{\\omega^2}{\\kappa} p(\\omega) =  f(\\omega) $$ where, $\\kappa = \\rho v^2$  is the bulk modulus, $\\rho $  is the density, $v$ is the velocity, $p$ is the pressure field,  $\\omega$ is the angular frequency and $f(\\omega)$ is the source signature. </p> <p>After discretizating,  the acoustic wave equation can be written in a compact  matrix form as $$ A({\\bf x}, {\\bf m}, \\bf \\omega){\\bf p}({\\bf x }, {\\bf x}_{s},\\omega) ={\\bf f(\\omega)} \\delta({\\bf x} - {\\bf x}_{s}), $$ where $ A({\\bf x}, {\\bf m}, \\omega) $ is the discretized Helmholtz equaton, $ {\\bf p}( {\\bf x}, {\\bf x}_{s},\\omega) $ is a complex pressure field for a shot located at $ {\\bf x}_{s} $.</p>"},{"location":"jupyter/","title":"Embedded Jupyter Notebook Showcase","text":""},{"location":"testing/","title":"Page to Test Different Features","text":"<p>Hello</p>"},{"location":"datasets/","title":"Datasets","text":"<p>To download dataset files, check out the \"Public\" and \"Private\" sections to the left. Please note that you can only access the private section if you have been given permission.</p>"},{"location":"datasets/#using-datasets","title":"Using Datasets","text":"<p>For an example on how you can use these datasets in Julia, see below: <pre><code>julia&gt; using PyPlot, Seismic\njulia&gt; download(\"http://seismic.physics.ualberta.ca/data/gom_cdp_nmo.su\",\"gom_cdp_nmo.su\");\njulia&gt; SegyToSeis(\"gom_cdp_nmo.su\",\"gom_cdp_nmo\",format=\"su\",input_type=\"ieee\",swap_bytes=true)\njulia&gt; d,h,ext=SeisRead(\"gom_cdp_nmo\");\njulia&gt; SeisPlot(d,ext)\n</code></pre> From a terminal, you can now check the content of <code>gom_cdp_nmo</code>. <pre><code>msacchi@macbook:~$ more gom_cdp_nmo\n</code></pre></p> Output <pre><code>        n1=1751\n        n2=92\n        n3=1\n        n4=1\n        n5=1\n        o1=0.0\n        o2=1.0\n        o3=0.0\n        o4=0.0\n        o5=0.0\n        d1=0.004\n        d2=1.0\n        d3=1.0\n        d4=1.0\n        d5=1.0\n        label1=\"Time\"\n        label2=\"Trace Number\"\n        label3=\"\"\n        label4=\"\"\n        label5=\"\"\n        unit1=\"s\"\n        unit2=\"index\"\n        unit3=\"\"\n        unit4=\"\"\n        unit5=\"\"\n        title=\"\"\n        data_format=\"native_float\"\n        esize=4\n        in=\"/Users/msacchi/gom_cdp_nmo@data@\"\n        headers=\"/Users/msacchi/gom_cdp_nmo@headers@\"\n</code></pre> <p>The binary data is in <code>gom_cdp_nmo@data@</code> and the headers are in <code>gom_cdp_nmo@headers@</code>.</p>"},{"location":"datasets/#marmousi-p-wave-velocity","title":"Marmousi P-wave Velocity","text":"<pre><code>julia&gt; using PyPlot, Seismic\njulia&gt; download(\"http://seismic.physics.ualberta.ca/data/marmvel.bin\",\"marmvel.bin\");\njulia&gt; n1=751;n2=2301; \njulia&gt; dx =4; dz = 4;\njulia&gt; f=open(\"marmvel.bin\");\njulia&gt; v = read(f, Float32,n1*n2);\njulia&gt; SeisPlot(reshape(v,n1,n2),dx=dx,dy=dz)\n</code></pre>"},{"location":"datasets/private_datasets/","title":"Protected Datasets","text":"<ul> <li>test_file1_private.txt<ul> <li>Checksum: sha256-3509705e492610d46c928b73709d45c2089bb8b0b77f1aa6910a009ce3ae9831</li> <li>Size: 37 B</li> </ul> </li> <li>test_file2_private.txt<ul> <li>Checksum: sha256-dd9f67d93cfa98d378aac80eb9f31c315b5b94f14914aab809d90e4657182b4a</li> <li>Size: 25 B</li> </ul> </li> <li>test_file3_private.txt<ul> <li>Checksum: sha256-4187be9721c53bfaffd1794949f23820e4efe6d01e5f3ad290dae97af4fe0879</li> <li>Size: 25 B</li> </ul> </li> <li>test_file4_private.txt<ul> <li>Checksum: sha256-6c1937d2c73155c526ad26c2d798e16f85280e18dee78b4078243180b91083f5</li> <li>Size: 25 B</li> </ul> </li> <li>test_file5_private.txt<ul> <li>Checksum: sha256-b21bc8210ad583577f706e91ae9718f0d04760c23b675e243022a9e49ee1cb85</li> <li>Size: 25 B</li> </ul> </li> </ul>"},{"location":"datasets/public_datasets/","title":"Public Datasets","text":"<ul> <li>Netherlands.su<ul> <li>Checksum: sha256-c69469c313765fecb4aeb55e584d5ca23f8d74f5596f55db4a31a8d43c790833</li> <li>Size: 1 MB</li> </ul> </li> <li>data_with_noise.su<ul> <li>Checksum: sha256-1a8504c6f86c39a3ecfbcfacc299ec731719de4f091f24e3c226e1c75719b36e</li> <li>Size: 112 KB</li> </ul> </li> <li>gom_cdp_nmo.su<ul> <li>Checksum: sha256-84619fb223eb0146a7ca70833d77873385104418e70624f26e4c80209305e990</li> <li>Size: 666 KB</li> </ul> </li> <li>min_phase_wavelet.su<ul> <li>Checksum: sha256-290e36cee78e59245363083f11ca527af601abeb43b59f36f4bd2da26fb3f526</li> <li>Size: 380 B</li> </ul> </li> <li>prestack_section.su<ul> <li>Checksum: sha256-8baaf281a36dcd5656e07e728bf97e0c1b513302b12206efbb24c3edb34d9ec8</li> <li>Size: 69 MB</li> </ul> </li> <li>small_stack.su<ul> <li>Checksum: sha256-189126251d45e5cd29021cc320c52c853e113f2d945360b3f250c338b17998ab</li> <li>Size: 20 KB</li> </ul> </li> <li>syn_cmp.su<ul> <li>Checksum: sha256-f9a8a2a4883e84d82d229758fe1b25680cd416ab6ef8de45d9b3bf229ab7f57f</li> <li>Size: 88 KB</li> </ul> </li> <li>syn_cmp_mult.su<ul> <li>Checksum: sha256-85f2d784504c573233dc59ff03592c7150eb2b70e63e4ef6a9f4f0aa3ac30a78</li> <li>Size: 207 KB</li> </ul> </li> <li>test_file1.txt<ul> <li>Checksum: sha256-b70263f7859197e77afb26388c76a399294cb164297667f35193f6addc2d5d54</li> <li>Size: 34 B</li> </ul> </li> <li>test_file2.txt<ul> <li>Checksum: sha256-5c6f4b52d90470b4627eb031a38e61e11c255955950d4ba0f3e7f15a4117e77c</li> <li>Size: 13 B</li> </ul> </li> <li>test_file3.txt<ul> <li>Checksum: sha256-d61083ecea5c585e58654d06bb85b5e719317103ab30b971452a529586e2850c</li> <li>Size: 13 B</li> </ul> </li> <li>test_file4.txt<ul> <li>Checksum: sha256-b81833973c6492f6822dba6af59c4a50901cb78777d7ec3dab08da1f106aa531</li> <li>Size: 13 B</li> </ul> </li> <li>test_file5.txt<ul> <li>Checksum: sha256-60cf5e4f9a0988a8976f4b0c4fc7de12b921250c7df3f58318c6695305046f28</li> <li>Size: 13 B</li> </ul> </li> <li>wavelet_for_small_stack.su<ul> <li>Checksum: sha256-103c2b752e4e5b3d84cc10c317cb98e49e010fd62ad44aed8472fd9bf7572be5</li> <li>Size: 420 B</li> </ul> </li> </ul>"},{"location":"static/jupyter/Julia%20Showcase/","title":"Jupyter","text":"In\u00a0[1]: Copied! <pre>using PyPlot, SeisPlot, SeisMain\ndownload(\"http://seismic.physics.ualberta.ca/data/gom_cdp_nmo.su\",\"gom_cdp_nmo.su\");\nSegyToSeis(\"gom_cdp_nmo.su\",\"gom_cdp_nmo\",format=\"su\",input_type=\"ieee\",swap_bytes=true);\nd,h,ext=SeisRead(\"gom_cdp_nmo\");\nplotpar = Dict(\n            :xlabel=&gt;\"Offset\", :xunits=&gt;\"(ft)\",:ox=&gt;0,:dx=&gt;5000,\n            :ylabel=&gt;\"Time\",:yunits=&gt;\"(seconds)\",:oy=&gt;0,:dy=&gt;h[1].d1,\n            :title=&gt;\"GOM_NMO_CDPgather\", :name=&gt;\"GOM_NMO_CDPgather_figure\"\n        );\nSeisPlotTX(d; plotpar...);  # Figure is saved in a file called \n                            # \"GOM_NMO_CDPgather_figure.png\n</pre> using PyPlot, SeisPlot, SeisMain download(\"http://seismic.physics.ualberta.ca/data/gom_cdp_nmo.su\",\"gom_cdp_nmo.su\"); SegyToSeis(\"gom_cdp_nmo.su\",\"gom_cdp_nmo\",format=\"su\",input_type=\"ieee\",swap_bytes=true); d,h,ext=SeisRead(\"gom_cdp_nmo\"); plotpar = Dict(             :xlabel=&gt;\"Offset\", :xunits=&gt;\"(ft)\",:ox=&gt;0,:dx=&gt;5000,             :ylabel=&gt;\"Time\",:yunits=&gt;\"(seconds)\",:oy=&gt;0,:dy=&gt;h[1].d1,             :title=&gt;\"GOM_NMO_CDPgather\", :name=&gt;\"GOM_NMO_CDPgather_figure\"         ); SeisPlotTX(d; plotpar...);  # Figure is saved in a file called                              # \"GOM_NMO_CDPgather_figure.png \t\t\t  <pre>number of traces: 92\nnumber of samples per trace: 1751\n</pre> In\u00a0[17]: Copied! <pre>using Images\nImages.display(\"image/png\", read(plotpar[:name] * \".png\"))\n</pre> using Images Images.display(\"image/png\", read(plotpar[:name] * \".png\")) In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"static/jupyter/Julia%20Showcase/#using-datasets","title":"Using Datasets\u00b6","text":""}]}